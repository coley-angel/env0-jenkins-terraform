pipeline {
    agent any 
    parameters {
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'What action should Terraform take?')
    }
    stages {
        stage('Terraform') {
            steps {
                script {
                    withCredentials([azureServicePrincipal('tf-1')]) {
                        dir('Terraform') {
                            sh "terraform init"
                            sh "terraform validate"
                            sh "terraform ${params.ACTION} -auto-approve"
                            if(params.ACTION == 'apply') {
                                def ip_address = sh(script: "terraform output ip_address", returnStdout: true).trim()
                                writeFile file: '../Ansible/inventory', text: "monitoring-server ansible_host=${ip_address}"
                            }
                        }
                    }
                }
            }
        }
        stage('Ansible') {
            when {
                expression { params.ACTION == 'apply' }
            }
            steps {
                dir('Ansible') {
                    sh "ansible-playbook -i inventory appPlaybook.yaml"
                }
            }
        }
    }
}
